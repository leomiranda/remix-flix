// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  password        String? // New field for form-based authentication
  imageUrl        String
  name            String
  ioPayCustomerId String?       @unique
  subscription    Subscription?
  createdAt       DateTime      @default(now())
  Transaction     Transaction[]
  sessions        Session[]
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Plan {
  id            String         @id @default(uuid())
  name          String
  price         Float
  description   String
  subscriptions Subscription[]
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  planId    String
  plan      Plan      @relation(fields: [planId], references: [id])
  startDate DateTime  @default(now())
  endDate   DateTime?
  status    String
}

model Transaction {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  amount        Float
  status        String
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
